package com.fisco.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class TestCRUDMultiParameter extends Contract {
    public static final String[] BINARY_ARRAY = {"","40525081019061060d9190610a02565b60030b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc3157358112816040516106419190610cc8565b60405180910390a180915050919050565b606080606061065f610786565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fcd7e3c1866040518263ffffffff1660e01b81526004016106ba9190610ce3565b60006040518083038186803b1580156106d257600080fd5b505afa1580156106e6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061070f9190610a6c565b90506060806002836020015151141561075957826020015160008151811061073357fe5b60200260200101519150826020015160018151811061074e57fe5b602002602001015190505b8682829550955095505050509193909250565b604051806040016040528060608152602001606081525090565b604051806040016040528060608152602001606081525090565b600082601f8301126107b157600080fd5b81356107c46107bf82610dd7565b610daa565b9150818183526020840193506020810190508360005b8381101561080a57813586016107f0888261089d565b8452602084019350602083019250506001810190506107da565b5050505092915050565b600082601f83011261082557600080fd5b815161083861083382610dd7565b610daa565b9150818183526020840193506020810190508360005b8381101561087e578151860161086488826108f1565b84526020840193506020830192505060018101905061084e565b5050505092915050565b60008151905061089781610f34565b92915050565b600082601f8301126108ae57600080fd5b81356108c16108bc82610dff565b610daa565b915080825260208301602083018583830111156108dd57600080fd5b6108e8838284610ee1565b50505092915050565b600082601f83011261090257600080fd5b815161091561091082610dff565b610daa565b9150808252602083016020830185838301111561093157600080fd5b61093c838284610ef0565b50505092915050565b60006040828403121561095757600080fd5b6109616040610daa565b9050600082015167ffffffffffffffff81111561097d57600080fd5b610989848285016108f1565b600083015250602082015167ffffffffffffffff8111156109a957600080fd5b6109b584828501610814565b60208301525092915050565b6000602082840312156109d357600080fd5b600082013567ffffffffffffffff8111156109ed57600080fd5b6109f9848285016107a0565b91505092915050565b600060208284031215610a1457600080fd5b6000610a2284828501610888565b91505092915050565b600060208284031215610a3d57600080fd5b600082013567ffffffffffffffff811115610a5757600080fd5b610a638482850161089d565b91505092915050565b600060208284031215610a7e57600080fd5b600082015167ffffffffffffffff811115610a9857600080fd5b610aa484828501610945565b91505092915050565b6000610ab98383610bce565b905092915050565b6000610acd8383610c84565b905092915050565b6000610ae082610e4b565b610aea8185610e86565b935083602082028501610afc85610e2b565b8060005b85811015610b385784840389528151610b198582610aad565b9450610b2483610e6c565b925060208a01995050600181019050610b00565b50829750879550505050505092915050565b6000610b5582610e56565b610b5f8185610e97565b935083602082028501610b7185610e3b565b8060005b85811015610bad5784840389528151610b8e8582610ac1565b9450610b9983610e79565b925060208a01995050600181019050610b75565b50829750879550505050505092915050565b610bc881610eca565b82525050565b6000610bd982610e61565b610be38185610ea8565b9350610bf3818560208601610ef0565b610bfc81610f23565b840191505092915050565b6000610c1282610e61565b610c1c8185610eb9565b9350610c2c818560208601610ef0565b610c3581610f23565b840191505092915050565b60006040830160008301518482036000860152610c5d8282610bce565b91505060208301518482036020860152610c778282610ad5565b9150508091505092915050565b60006040830160008301518482036000860152610ca18282610bce565b91505060208301518482036020860152610cbb8282610bce565b9150508091505092915050565b6000602082019050610cdd6000830184610bbf565b92915050565b60006020820190508181036000830152610cfd8184610c07565b905092915050565b60006040820190508181036000830152610d1f8185610c07565b90508181036020830152610d338184610b4a565b90509392505050565b60006060820190508181036000830152610d568186610c07565b90508181036020830152610d6a8185610c07565b90508181036040830152610d7e8184610c07565b9050949350505050565b60006020820190508181036000830152610da28184610c40565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610dcd57600080fd5b8060405250919050565b600067ffffffffffffffff821115610dee57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610e1657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b60008160030b9050919050565b82818337600083830152505050565b60005b83811015610f0e578082015181840152602081019050610ef3565b83811115610f1d576000848401525b50505050565b6000601f19601f8301169050919050565b610f3d81610ed4565b8114610f4857600080fd5b5056fea2646970667358221220dcf9097a8e5275672d1b3188c0d94719f4202d4c5bb9053c1e3420f343fa241864736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","60018151811061060957fe5b60200260200101518260008151811061061e57fe5b60200260200101819052508360028151811061063657fe5b60200260200101518260018151811061064b57fe5b602002602001018190525061065e61076c565b60405180604001604052808381526020018481525090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634c8b9530836040518263ffffffff1660e01b81526004016106d29190610d88565b602060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107249190610a02565b60030b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f9816040516107589190610cc8565b60405180910390a180945050505050919050565b604051806040016040528060608152602001606081525090565b604051806040016040528060608152602001606081525090565b600082601f8301126107b157600080fd5b81356107c46107bf82610dd7565b610daa565b9150818183526020840193506020810190508360005b8381101561080a57813586016107f0888261089d565b8452602084019350602083019250506001810190506107da565b5050505092915050565b600082601f83011261082557600080fd5b815161083861083382610dd7565b610daa565b9150818183526020840193506020810190508360005b8381101561087e578151860161086488826108f1565b84526020840193506020830192505060018101905061084e565b5050505092915050565b60008151905061089781610f34565b92915050565b600082601f8301126108ae57600080fd5b81356108c16108bc82610dff565b610daa565b915080825260208301602083018583830111156108dd57600080fd5b6108e8838284610ee1565b50505092915050565b600082601f83011261090257600080fd5b815161091561091082610dff565b610daa565b9150808252602083016020830185838301111561093157600080fd5b61093c838284610ef0565b50505092915050565b60006040828403121561095757600080fd5b6109616040610daa565b9050600082015167ffffffffffffffff81111561097d57600080fd5b610989848285016108f1565b600083015250602082015167ffffffffffffffff8111156109a957600080fd5b6109b584828501610814565b60208301525092915050565b6000602082840312156109d357600080fd5b600082013567ffffffffffffffff8111156109ed57600080fd5b6109f9848285016107a0565b91505092915050565b600060208284031215610a1457600080fd5b6000610a2284828501610888565b91505092915050565b600060208284031215610a3d57600080fd5b600082013567ffffffffffffffff811115610a5757600080fd5b610a638482850161089d565b91505092915050565b600060208284031215610a7e57600080fd5b600082015167ffffffffffffffff811115610a9857600080fd5b610aa484828501610945565b91505092915050565b6000610ab98383610bce565b905092915050565b6000610acd8383610c84565b905092915050565b6000610ae082610e4b565b610aea8185610e86565b935083602082028501610afc85610e2b565b8060005b85811015610b385784840389528151610b198582610aad565b9450610b2483610e6c565b925060208a01995050600181019050610b00565b50829750879550505050505092915050565b6000610b5582610e56565b610b5f8185610e97565b935083602082028501610b7185610e3b565b8060005b85811015610bad5784840389528151610b8e8582610ac1565b9450610b9983610e79565b925060208a01995050600181019050610b75565b50829750879550505050505092915050565b610bc881610eca565b82525050565b6000610bd982610e61565b610be38185610ea8565b9350610bf3818560208601610ef0565b610bfc81610f23565b840191505092915050565b6000610c1282610e61565b610c1c8185610eb9565b9350610c2c818560208601610ef0565b610c3581610f23565b840191505092915050565b60006040830160008301518482036000860152610c5d8282610bce565b91505060208301518482036020860152610c778282610ad5565b9150508091505092915050565b60006040830160008301518482036000860152610ca18282610bce565b91505060208301518482036020860152610cbb8282610bce565b9150508091505092915050565b6000602082019050610cdd6000830184610bbf565b92915050565b60006020820190508181036000830152610cfd8184610c07565b905092915050565b60006040820190508181036000830152610d1f8185610c07565b90508181036020830152610d338184610b4a565b90509392505050565b60006060820190508181036000830152610d568186610c07565b90508181036020830152610d6a8185610c07565b90508181036040830152610d7e8184610c07565b9050949350505050565b60006020820190508181036000830152610da28184610c40565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715610dcd57600080fd5b8060405250919050565b600067ffffffffffffffff821115610dee57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610e1657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b60008160030b9050919050565b82818337600083830152505050565b60005b83811015610f0e578082015181840152602081019050610ef3565b83811115610f1d576000848401525b50505050565b6000601f19601f8301169050919050565b610f3d81610ed4565b8114610f4857600080fd5b5056fea2646970667358221220542374077976dfc40dad2870ea2dcbf572ffe2972d02891e2a03b4045634d1f864736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"insert\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"selector\":[574357641,4184593792],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"selector\":[2153356875,2260153337],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"selector\":[4242006977,1530027384],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"entity\",\"type\":\"string[]\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"selector\":[198665691,4159899471],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_UPDATE = "update";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected TestCRUDMultiParameter(String contractAddress, Client client,
            CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CreateResultEventResponse> getCreateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<InsertResultEventResponse> getInsertResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt insert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String insert(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(List<String> entity) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String remove(String name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String name) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(name)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<String, String, String> select(String name) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue());
    }

    public TransactionReceipt update(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String update(List<String> entity, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(List<String> entity) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(entity, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static TestCRUDMultiParameter load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new TestCRUDMultiParameter(contractAddress, client, credential);
    }

    public static TestCRUDMultiParameter deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(TestCRUDMultiParameter.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    @Override
    public String toString() {
        return "TestCRUDMultiParameter{" +
                "contractAddress='" + contractAddress + '\'' +
                '}';
    }
}
